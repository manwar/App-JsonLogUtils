#!perl
# ABSTRACT: filters output by pattern matching against JSON object fields
# PODNAME: jgrep

use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;
use List::Util qw(all);
use App::JsonLogUtils::Iter;

my $help    = 0;
my $inverse = 0;
my $nocase  = 0;
my %match;

GetOptions(
  'help'          => \$help,
  'match=s%'      => \%match,
  'inverse|v'     => \$inverse,
  'ignore-case|i' => \$nocase,
) or pod2usage(2);

if ($help) {
  pod2usage(1);
  exit 0;
}

$| = 1;

my $MATCH = (!$inverse && !$nocase) ? sub{ $_[0] =~ /$_[1]/  }
          : (!$inverse && $nocase ) ? sub{ $_[0] =~ /$_[1]/i }
          : ($inverse  && !$nocase) ? sub{ $_[0] !~ /$_[1]/  }
                                    : sub{ $_[0] !~ /$_[1]/i };

sub match {
  my $obj = shift;
  all{ $MATCH->($obj->{$_} || '', $match{$_}) }
    keys %match;
}

sub run {
  my $lines = igrep{ match(@_) } ijson icat shift;
  while (my ($obj, $line) = <$lines>) {
    print $line, "\n";
  }
}

if (@ARGV) {
  run $_ foreach @ARGV;
} else {
  run \*STDIN;
}

exit 0;

=head1 SYNOPSIS

  jgrep [-v] [-i] -m field1=pattern -m field2=pattern [/path/to/file1 /path/to/file2 ...]

=head1 DESCRIPTION

Filters JSON-formatted line input from supplied file path(s) or standard input
if not provided.

=head1 OPTIONS

=head2 --match | -m

Only include lines if the value of C<field> matches the regular expression
C<pattern>. If the field is not present in the object, its value is treated as
an empty string. This switch may be used multiple times.

=head2 --ignore-case | -i

Ignore case when performing matching.

=head2 --inverse | -v

Invert the meaning of patterns provided by C<--match>.

=cut
